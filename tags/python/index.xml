<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <docs>https://blogs.law.harvard.edu/tech/rss</docs>
    <title>python on After Dark</title>
    <link>https://domain.example/tags/python/</link>
    <description>Recent content in python on After Dark</description>
    <image>
      <title>python on After Dark</title>
      <link>https://domain.example/tags/python/</link>
      <url>https://source.unsplash.com/collection/983219/2000x1322</url>
    </image>
    <ttl>1440</ttl>
    <generator>After Dark 9.2.2 (Hugo 0.70.0)</generator>
    <language>en-US</language>
    <copyright>Copyright &amp;copy; Copyright Owner. Licensed under CC-BY-ND-4.0.</copyright>
    <lastBuildDate>Tue, 02 Jun 2020 22:53:27 UT</lastBuildDate>
    <atom:link href="https://domain.example/tags/python/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Autoformata√ß√£o de C√≥digo ‚Äï Quando e Como</title>
      <link>https://domain.example/post/2020-05-13-autoformat-black/</link>
      <pubDate>Wed, 13 May 2020 23:49:47 UT</pubDate>
      <guid>https://domain.example/post/2020-05-13-autoformat-black/</guid>
      <description>TL; DR: Use o √≠ndice para ir direto ao ponto que voc√™ quer, por exemplo Reformatando com Black!
 Introdu√ß√£o Fazer um c√≥digo leg√≠vel e bonito √© algo importante no nosso dia-a-dia, especialmente quando colaboramos com demais colegas. Um c√≥digo que √© mal formatado e mal estruturado √© cansativo de ler e dif√≠cil de entender o que ele faz.
A formata√ß√£o de um c√≥digo √© s√≥ um peda√ßo da hist√≥ria, mas um peda√ßo muito importante. Ela n√£o √© a √∫nica respons√°vel pela legibilidade do c√≥digo ‚Äï um projeto mal estruturado, com classe e fun√ß√µes com responsabilidades mal definidas pode at√© ser bem formatado, mas ser√° dif√≠cil de compreender.
No come√ßo de minha carreira, eu n√£o gostava muito da ideia de formata√ß√£o autom√°tica de c√≥digo. Por um lado, eu acho que eu era um pouco orgulhoso em rela√ß√£o √† isso e n√£o estava afim de perder &amp;ldquo;controle&amp;rdquo;. Por outro lado, mais de 10 anos atr√°s, essas ferramentas n√£o eram exatamente boas, pelo menos n√£o as que eu conhecia.
</description>
      <category domain="https://domain.example/categories/python">Python</category>
      <category domain="https://domain.example/categories/estilo-de-c%C3%B3digo">Estilo De C√≥digo</category>
      <content:encoded><![CDATA[TL; DR: Use o √≠ndice para ir direto ao ponto que voc√™ quer, por exemplo Reformatando com Black!
 Introdu√ß√£o Fazer um c√≥digo leg√≠vel e bonito √© algo importante no nosso dia-a-dia, especialmente quando colaboramos com demais colegas. Um c√≥digo que √© mal formatado e mal estruturado √© cansativo de ler e dif√≠cil de entender o que ele faz.
A formata√ß√£o de um c√≥digo √© s√≥ um peda√ßo da hist√≥ria, mas um peda√ßo muito importante. Ela n√£o √© a √∫nica respons√°vel pela legibilidade do c√≥digo ‚Äï um projeto mal estruturado, com classe e fun√ß√µes com responsabilidades mal definidas pode at√© ser bem formatado, mas ser√° dif√≠cil de compreender.
No come√ßo de minha carreira, eu n√£o gostava muito da ideia de formata√ß√£o autom√°tica de c√≥digo. Por um lado, eu acho que eu era um pouco orgulhoso em rela√ß√£o √† isso e n√£o estava afim de perder &amp;ldquo;controle&amp;rdquo;. Por outro lado, mais de 10 anos atr√°s, essas ferramentas n√£o eram exatamente boas, pelo menos n√£o as que eu conhecia.
Quanto ao primeiro argumento, hoje eu vejo essa resist√™ncia √† perda do &amp;ldquo;controle&amp;rdquo; como algo meio bobo. A formata√ß√£o do c√≥digo por mais importante que seja, n√£o √© exatamente o foco do trabalho de um desenvolvedor ou sua finalidade. O centro do nosso trabalho √© a abstra√ß√£o de problemas do mundo real para dentro de um algoritmo e a solu√ß√£o desse problema atrav√©s de ferramentas computacionais, levando em considera√ß√£o as restri√ß√µes de projeto que temos.
Al√©m disso, se nosso c√≥digo deve seguir um livro de estilo padronizado, qual √© o m√©rito em gastar tempo e esfor√ßo para cumprir um padr√£o definido? Humanos s√£o bons em criar, em fazer coisas novas. √â a√≠ que mora nosso diferencial, o que for automatiz√°vel, podemos deixar que o computador fa√ßa por n√≥s e nos deixe mais livres.
J√° em rela√ß√£o ao segundo argumento, hoje n√≥s temos diversas ferramentas de formata√ß√£o autom√°tica que s√£o cada vez mais robustas. O foco do restante desse artigo √© o Black, um formatador autom√°tico para Python.
Black A instala√ß√£o do Black pode ser feita usando pip install black . Se seu ambiente estiver bem configurado, voc√™ conseguir√° digitar black --help em seu terminal e ver algumas de suas op√ß√µes de uso. Caso voc√™ queira, pode explorar o funcionamento dele no Black Playground.
O Black permite diversas formas de execu√ß√£o. Podemos, por exemplo, invoc√°-lo direto da linha de comando com uma string de c√≥digo:
black -c &amp;quot;x=2 * 3&#43;4&amp;quot; E ele te retornar√° a express√£o propriamente formatada, x = 2 * 3 &#43; 4 com os espa√ßos corretos.
Explorando Erros com Pylint Considere agora esse c√≥digo, bem mal formatado mas ainda assim √© v√°lido:
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16  &amp;#34;&amp;#34;&amp;#34; M√≥dulo que oferece um fatorial iterativo &amp;#34;&amp;#34;&amp;#34; def fatorial(n): result=1 for i in(range(1, n&#43;1)): result*=i return result print( fatorial( 3)) print(fatorial(2 )) print(fatorial(10 ))   Uma forma de avaliarmos a situa√ß√£o desse c√≥digo √© usando o pylint . Esse arquivo est√° salvo em minha m√°quina como &amp;ldquo;black_sample01.py&amp;rdquo;. Rodando pylint black_sample01.py , nos d√° a seguinte resposta:
Resultado do PyLint  ************* Module black_sample01 black_sample01.py:2:10: C0326: Exactly one space required around assignment result=1 ^ (bad-whitespace) black_sample01.py:7:0: C0325: Unnecessary parens after &#39;in&#39; keyword (superfluous-parens) black_sample01.py:8:14: C0326: Exactly one space required around assignment result*=i ^^ (bad-whitespace) black_sample01.py:11:5: C0326: No space allowed after bracket print( fatorial( 3)) ^ (bad-whitespace) black_sample01.py:11:16: C0326: No space allowed after bracket print( fatorial( 3)) ^ (bad-whitespace) black_sample01.py:12:21: C0326: No space allowed before bracket print(fatorial(2 )) ^ (bad-whitespace) black_sample01.py:13:0: C0304: Final newline missing (missing-final-newline) black_sample01.py:13:22: C0326: No space allowed before bracket print(fatorial(10 )) ^ (bad-whitespace) black_sample01.py:1:0: C0114: Missing module docstring (missing-module-docstring) black_sample01.py:1:0: C0103: Argument name &amp;quot;n&amp;quot; doesn&#39;t conform to snake_case naming style (invalid-name) black_sample01.py:1:0: C0116: Missing function or method docstring (missing-function-docstring) -------------------------------------------------------------------- Your code has been rated at -3.75/10    Existem erros de par√™nteses desnecess√°rios, erros de espa√ßo em branco e v√°rias linhas desnecess√°rias tamb√©m. Podemos agora explorar o black .
Verificando Poss√≠veis Mudan√ßas Chamando o black com a flag --check , ele apenas nos conta se o arquivo seria reformatado ou n√£o. Isso √© √∫til para usar em servidores de CI e evitar que arquivos mal formatados subam para a base:
  $ black --check black_sample01.py would reformat black_sample01.py Oh no! üí• üíî üí• 1 file would be reformatted.    (Mais sobre CI e ferramentas assim em breve!)
N√≥s podemos usar a flag --diff para ver as mudan√ßas que seriam feitas:
black --diff  $ black --diff black_sample01.py --- black_sample01.py	2020-05-20 13:52:23.495800 &#43;0000 &#43;&#43;&#43; black_sample01.py	2020-05-20 13:55:56.786380 &#43;0000 @@ -2, 19 &#43;2, 16 @@ M√≥dulo que oferece um fatorial iterativo &amp;quot;&amp;quot;&amp;quot; def fatorial(n): * result=1 * result = 1 - - - * for i in(range(1, n&#43;1)): * result*=i * for i in range(1, n &#43; 1): * result *= i return result &#43;print(fatorial(3)) &#43;print(fatorial(2)) &#43;print(fatorial(10)) -print( fatorial( 3)) -print(fatorial(2 )) -print(fatorial(10 )) reformatted black_sample01.py All done! ‚ú® üç∞ ‚ú® 1 file reformatted.    Honestamente, √© meio raro eu usar essas duas flags no meu dia-a-dia. Uma situa√ß√£o em que eu costumo usar a --diff √© quando eu estou trabalhando em uma base de c√≥digo pela primeira vez e estou pensando se vou ou n√£o sugerir uma mudan√ßa de estilo. Rodar o --diff me permite estimar o qu√£o trabalhoso seria reformatar a base toda. J√° a flag --check eu uso em servidores de CI (Integra√ß√£o Cont√≠nua) mesmo.
Reformatando com Black! E finalmente a reformata√ß√£o √© bem direta. Basta invocar o black sem flags e com o arquivo:
 $ black black_sample01.py reformatted black_sample01.py All done! ‚ú® üç∞ ‚ú® 1 file reformatted. O arquivo em si ser√° modificado:
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16  &amp;#34;&amp;#34;&amp;#34; M√≥dulo que oferece um fatorial iterativo &amp;#34;&amp;#34;&amp;#34; def fatorial(n): result = 1 for i in range(1, n &#43; 1): result *= i return result print(fatorial(3)) print(fatorial(2)) print(fatorial(10))   Usando Black no dia-a-dia Okay, formatamos um arquivo! Mas como garantir isso ao longo do processo? Eu gosto de usar tr√™s abordagens diferentes:
 Direto no meu editor de texto Como um hook pre-commit no git No servidor de CI  A parte do hook e do CI merecem um artigo s√≥ pra elas. Quanto ao editor, seja l√° qual for seu editor, ele provavelmente j√° tem uma integra√ß√£o com o Black.
Ultimamente, tenho usado o VSCode como editor principal. A configura√ß√£o no VSCode pode ser global ou espec√≠fica de projeto. Uma vez habilitado, voc√™ pode autoformatar seu c√≥digo apertando CTRL &#43; Shift &#43; I
Configura√ß√£o Global No caso da configura√ß√£o global, abra as configura√ß√µes em File &amp;gt; Preferences &amp;gt; Settings ou digite CTRL &#43; , . Na barra de busca, digite &amp;ldquo;python formatting provider&amp;rdquo;. Voc√™ dever√° ver essa op√ß√£o:
  Configura√ß√£o do Black no VSCode   Selecione &amp;ldquo;black&amp;rdquo; na lista e pronto!
Configura√ß√£o Local A configura√ß√£o local de projetos √© feita atrav√©s do arquivo .vscode/settings.json . Basta adicionar nele a chave &amp;quot;python.formatting.provider&amp;quot;: &amp;quot;black&amp;quot; para habilitar o black no seu projeto atual.
Autoformatar ao salvar ou n√£o? Tudo isso que a gente fez habilitou a invoca√ß√£o manual do Black ‚Äï voc√™ precisa apertar CTRL &#43; Shift &#43; I para formatar o c√≥digo. O VSCode e muitos outros editores d√£o uma outra op√ß√£o ‚Äï autoformatar ao salvar.
Particularmente, eu deixo essa op√ß√£o desativada nas configura√ß√µes globais. Muitas vezes eu trabalho em c√≥digo que envolve outros colegas, em projetos que n√£o usam black ou que simplesmente possuem um padr√£o de formata√ß√£o diferente. Autoformatar nesses casos √© ruim.
Projetos com c√≥digo &amp;ldquo;feio&amp;rdquo; ou seguindo um padr√£o de formata√ß√£o diferente, podem ser problem√°ticos. Mas mais problem√°tico ainda √© quebrar a consist√™ncia interna do projeto. Usar CamelCase para dar nomes em vari√°veis n√£o √© comum em Python e o PyLint vai reclamar disso. Por√©m, se voc√™ est√° trabalhando em um projeto que usa CamelCase para tudo, mantenha a consist√™ncia e ‚Äï talvez ‚Äï proponha a mudan√ßa de padr√£o em um segundo momento. Mas isso √© assunto pra outro post!
]]></content:encoded>
    </item>
  </channel>
</rss>
